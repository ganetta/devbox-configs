# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:
    # --- Repo klonen (robust, fällt auf C:\ zurück, wenn Z:\ noch nicht da ist; läuft nur, wenn Git vorhanden ist) ---
    - resource: PSDscResources/Script
      id: cloneRepo
      settings:
        TestScript: |
          # Bereits geklont?
          if (Test-Path "Z:\workspaces\eshop\.git") { return $true }
          if (Test-Path "C:\workspaces\eshop\.git") { return $true }
          return $false
        SetScript: |
          if (Test-Path 'Z:') {
            $repoRoot = 'Z:\workspaces'
          }
          else {
            $repoRoot = 'C:\workspaces'
          }
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            Write-Host "Git nicht gefunden; überspringe Clone in diesem Lauf."
            return
          }
          if (-not (Test-Path $repoRoot)) { New-Item -ItemType Directory -Path $repoRoot -Force | Out-Null }
          $target = Join-Path $repoRoot 'eshop'
          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Path $target -Force | Out-Null }
          if (-not (Test-Path (Join-Path $target '.git'))) {
            git clone --quiet https://github.com/contoso-co/eshop.git $target
          }
        GetScript: |
          if (Test-Path "Z:\workspaces\eshop\.git" -or Test-Path "C:\workspaces\eshop\.git") {
            return @{ Cloned = $true }
          }

          return @{ Cloned = $false }

    # --- Tools & Apps über WinGet ---
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: docker
      directives:
        description: Install Docker Desktop
        allowPrerelease: true
      settings:
        id: Docker.DockerDesktop
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: chrome
      directives:
        description: Install Google Chrome
      settings:
        id: Google.Chrome
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: adobereader
      directives:
        description: Install Adobe Acrobat Reader
      settings:
        id: Adobe.Acrobat.Reader.64-bit
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: notepadpp
      directives:
        description: Install Notepad++
      settings:
        id: Notepad++.Notepad++
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
      settings:
        id: Microsoft.AzureCLI
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: terraform
      directives:
        description: Install Terraform
      settings:
        id: Hashicorp.Terraform
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: datagrip
      directives:
        description: Install JetBrains DataGrip
      settings:
        id: JetBrains.DataGrip
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: dbeaver
      directives:
        description: Install DBeaver
      settings:
        id: DBeaver.DBeaver.Community
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: storageexplorer
      directives:
        description: Install Azure Storage Explorer
      settings:
        id: Microsoft.Azure.StorageExplorer
        source: winget

    # --- Python 3.12: maschinenweit + PATH ---
    - resource: PSDscResources/Script
      id: installPython312
      directives:
        description: Installiert Python 3.12 maschinenweit
      settings:
        TestScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
          }
          catch {
            return $false
          }

          try {
            $version = (& $pythonExe --version) 2>$null
          }
          catch {
            return $false
          }

          $isCorrectMajor = $version -match '^Python 3\.12'
          $isMachineInstall = $pythonExe -like 'C:\\Program Files\\*'

          return ($isCorrectMajor -and $isMachineInstall)

        SetScript: |
          function Ensure-Winget {
            $winget = Get-Command winget.exe -ErrorAction SilentlyContinue
            if ($winget) { return $true }

            $wingetUri = 'https://aka.ms/getwinget'
            $download  = Join-Path $env:TEMP 'AppInstaller.msixbundle'

            Invoke-WebRequest -Uri $wingetUri -OutFile $download -UseBasicParsing
            Add-AppxPackage -Path $download -ForceApplicationShutdown

            $winget = Get-Command winget.exe -ErrorAction SilentlyContinue
            return [bool]$winget
          }

          if (-not (Ensure-Winget)) {
            throw "Winget konnte nicht installiert werden."
          }

          try {
            $updateArgs = @(
              'source','update','msstore',
              '--accept-source-agreements',
              '--accept-package-agreements',
              '--disable-interactivity'
            )

            $updateProcess = Start-Process -FilePath winget.exe -ArgumentList $updateArgs -Wait -PassThru -WindowStyle Hidden
            if ($updateProcess.ExitCode -ne 0) {
              Write-Warning "Winget msstore-Quelle konnte nicht aktualisiert werden (ExitCode: $($updateProcess.ExitCode))."
            }
          }
          catch {
            Write-Warning "Winget msstore-Quelle konnte nicht aktualisiert werden: $($_.Exception.Message)"
          }

          $arguments = @(
            '--id', 'Python.Python.3.12',
            '--source', 'winget',
            '--silent',
            '--disable-interactivity',
            '--accept-package-agreements',
            '--accept-source-agreements',
            '--scope', 'machine',
            '--force'
          )

          $process = Start-Process -FilePath winget.exe -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "Winget-Installation von Python 3.12 schlug fehl (ExitCode: $($process.ExitCode))"
          }
        GetScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null

            return @{
              Installed = $true
              Path       = $pythonExe
              Version    = $version
            }
          }
          catch {
            return @{ Installed = $false }
          }

    # --- WSL via Winget installieren ---
    - resource: PSDscResources/Script
      id: installWslViaWinget
      directives:
        description: Installiert das Windows-Subsystem für Linux über Winget
      settings:
        TestScript: |
          try {
            $wslCmd = Get-Command wsl.exe -ErrorAction Stop
          }
          catch {
            return $false
          }

          try {
            $status = (& $wslCmd.Source --status) 2>$null
          }
          catch {
            return $false
          }

          return ($status -match 'Kernel version')

        SetScript: |
          function Ensure-Winget {
            $winget = Get-Command winget.exe -ErrorAction SilentlyContinue
            if ($winget) { return $true }

            $wingetUri = 'https://aka.ms/getwinget'
            $download  = Join-Path $env:TEMP 'AppInstaller.msixbundle'

            Invoke-WebRequest -Uri $wingetUri -OutFile $download -UseBasicParsing
            Add-AppxPackage -Path $download -ForceApplicationShutdown

            $winget = Get-Command winget.exe -ErrorAction SilentlyContinue
            return [bool]$winget
          }

          if (-not (Ensure-Winget)) {
            throw "Winget konnte nicht installiert werden."
          }

          try {
            $updateArgs = @(
              'source','update','msstore',
              '--accept-source-agreements',
              '--accept-package-agreements',
              '--disable-interactivity'
            )

            $updateProcess = Start-Process -FilePath winget.exe -ArgumentList $updateArgs -Wait -PassThru -WindowStyle Hidden
            if ($updateProcess.ExitCode -ne 0) {
              Write-Warning "Winget msstore-Quelle konnte nicht aktualisiert werden (ExitCode: $($updateProcess.ExitCode))."
            }
          }
          catch {
            Write-Warning "Winget msstore-Quelle konnte nicht aktualisiert werden: $($_.Exception.Message)"
          }

          $arguments = @(
            '--id','Microsoft.WSL',
            '--source','winget',
            '--silent',
            '--disable-interactivity',
            '--accept-package-agreements',
            '--accept-source-agreements',
            '--force'
          )

          $process = Start-Process -FilePath winget.exe -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "WSL-Installation über Winget schlug fehl (ExitCode: $($process.ExitCode))"
          }

        GetScript: |
          try {
            $wslCmd = Get-Command wsl.exe -ErrorAction Stop
            $status = (& $wslCmd.Source --status) 2>$null
            return @{
              Installed = $true
              Status    = $status
            }
          }
          catch {
            return @{ Installed = $false }
          }
