# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:
    # --- Repo klonen (robust, fällt auf C:\ zurück, wenn Z:\ noch nicht da ist; läuft nur, wenn Git vorhanden ist) ---
    - resource: PSDscResources/Script
      id: cloneRepo
      settings:
        TestScript: |
          # Bereits geklont?
          if (Test-Path "Z:\workspaces\eshop\.git") { return $true }
          if (Test-Path "C:\workspaces\eshop\.git") { return $true }
          return $false
        SetScript: |
          if (Test-Path 'Z:') {
            $repoRoot = 'Z:\workspaces'
          }
          else {
            $repoRoot = 'C:\workspaces'
          }
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            Write-Host "Git nicht gefunden; überspringe Clone in diesem Lauf."
            return
          }
          if (-not (Test-Path $repoRoot)) { New-Item -ItemType Directory -Path $repoRoot -Force | Out-Null }
          $target = Join-Path $repoRoot 'eshop'
          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Path $target -Force | Out-Null }
          if (-not (Test-Path (Join-Path $target '.git'))) {
            git clone --quiet https://github.com/contoso-co/eshop.git $target
          }
        GetScript: |
          if (Test-Path "Z:\workspaces\eshop\.git" -or Test-Path "C:\workspaces\eshop\.git") {
            return @{ Cloned = $true }
          }

          return @{ Cloned = $false }

    # --- Tools & Apps über WinGet ---
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: docker
      directives:
        description: Install Docker Desktop
        allowPrerelease: true
      settings:
        id: Docker.DockerDesktop
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: chrome
      directives:
        description: Install Google Chrome
      settings:
        id: Google.Chrome
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: adobereader
      directives:
        description: Install Adobe Acrobat Reader
      settings:
        id: Adobe.Acrobat.Reader.64-bit
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: notepadpp
      directives:
        description: Install Notepad++
      settings:
        id: Notepad++.Notepad++
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
      settings:
        id: Microsoft.AzureCLI
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: terraform
      directives:
        description: Install Terraform
      settings:
        id: Hashicorp.Terraform
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: datagrip
      directives:
        description: Install JetBrains DataGrip
      settings:
        id: JetBrains.DataGrip
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: storageexplorer
      directives:
        description: Install Azure Storage Explorer
      settings:
        id: Microsoft.Azure.StorageExplorer
        source: winget

    # --- Python 3.12 über Offline-Installer ---
    - resource: PSDscResources/Script
      id: installPython312
      directives:
        description: Installiert Python 3.12 (x64) offline und fügt es zum PATH hinzu
      settings:
        TestScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null
            $isDesired = $version -match '^Python 3\.12'
            $isMachine = $pythonExe -like 'C:\\Program Files*'
            return ($isDesired -and $isMachine)
          }
          catch {
            return $false
          }
        SetScript: |
          $version   = '3.12.6'
          $fileName  = "python-$version-amd64.exe"
          $download  = "https://www.python.org/ftp/python/$version/$fileName"
          $installer = Join-Path $env:TEMP $fileName

          if (-not (Test-Path $installer)) {
            Invoke-WebRequest -Uri $download -OutFile $installer -UseBasicParsing
          }

          if (-not (Test-Path $installer)) {
            throw "Python-Installer wurde nicht erfolgreich heruntergeladen."
          }

          $arguments = '/quiet InstallAllUsers=1 PrependPath=1 Include_launcher=1 Include_test=0'
          $process   = Start-Process -FilePath $installer -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "Python-Installation schlug fehl (ExitCode: $($process.ExitCode))."
          }
        GetScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null
            return @{ Installed = $true; Path = $pythonExe; Version = $version }
          }
          catch {
            return @{ Installed = $false }
          }

    # --- DBeaver Community über Offline-Installer ---
    - resource: PSDscResources/Script
      id: installDBeaver
      directives:
        description: Installiert DBeaver Community Edition (silent)
      settings:
        TestScript: |
          $exe = Get-Command 'C:\Program Files\DBeaver\dbeaver.exe' -ErrorAction SilentlyContinue
          return [bool]$exe
        SetScript: |
          $ErrorActionPreference = 'Stop'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $temp      = Join-Path $env:TEMP 'DBeaverSetup'
          if (-not (Test-Path $temp)) { New-Item -ItemType Directory -Path $temp -Force | Out-Null }

          $installer = Join-Path $temp 'dbeaver-setup.exe'
          $url       = 'https://dbeaver.io/files/dbeaver-ce-latest-x86_64-setup.exe'

          if (Test-Path $installer) { Remove-Item $installer -Force }
          Invoke-WebRequest -Uri $url -OutFile $installer -UseBasicParsing

          if (-not (Test-Path $installer)) {
            throw "DBeaver-Installer konnte nicht heruntergeladen werden."
          }

          $size = (Get-Item $installer).Length
          if ($size -lt 1048576) {
            throw "DBeaver-Installer ist zu klein/ungültig (Größe: $size Bytes)."
          }

          
          $arguments  = @('/S','/allusers')
          $process    = Start-Process -FilePath $installer -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden
        GetScript: |
          $exe = Get-Command 'C:\Program Files\DBeaver\dbeaver.exe' -ErrorAction SilentlyContinue
          return @{
            Installed = [bool]$exe
            Path       = if ($exe) { $exe.Source } else { $null }
          }

    # --- WSL installieren ---
    - resource: PSDscResources/Script
      id: installWsl
      directives:
        description: Installiert WSL (Subsystem + Kernel) über wsl --install
      settings:
        TestScript: |
          try {
            $wslFeature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
            $vmFeature  = Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform
            if ($wslFeature.State -ne 'Enabled' -or $vmFeature.State -ne 'Enabled') {
              return $false
            }

            $process = Start-Process -FilePath 'wsl.exe' -ArgumentList '--status' -Wait -PassThru -WindowStyle Hidden
            if ($process.ExitCode -eq 0) {
              $output = (& wsl --status) 2>$null
              return ($output -match 'Kernel version')
            }

            return $true
          }
          catch {
            return $false
          }
        SetScript: |
          $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          if (-not $isAdmin) {
            Write-Warning "WSL-Installation benötigt Administratorrechte. Schritt wird übersprungen."
            return
          }

          $arguments = @('--install','--no-distribution')
          $process   = Start-Process -FilePath 'wsl.exe' -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "WSL-Installation schlug fehl (ExitCode: $($process.ExitCode))."
          }
        GetScript: |
          try {
            $status = (& wsl --status) 2>$null
            return @{ KernelStatus = $status }
          }
          catch {
            return @{ KernelStatus = 'WSL nicht verfügbar' }
          }
