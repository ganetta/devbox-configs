# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:
    # --- Repo klonen (robust, fällt auf C:\ zurück, wenn Z:\ noch nicht da ist; läuft nur, wenn Git vorhanden ist) ---
    - resource: PSDscResources/Script
      id: cloneRepo
      settings:
        TestScript: |
          # Bereits geklont?
          if (Test-Path "Z:\workspaces\eshop\.git") { return $true }
          if (Test-Path "C:\workspaces\eshop\.git") { return $true }
          return $false
        SetScript: |
          if (Test-Path 'Z:') {
            $repoRoot = 'Z:\workspaces'
          }
          else {
            $repoRoot = 'C:\workspaces'
          }
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            Write-Host "Git nicht gefunden; überspringe Clone in diesem Lauf."
            return
          }
          if (-not (Test-Path $repoRoot)) { New-Item -ItemType Directory -Path $repoRoot -Force | Out-Null }
          $target = Join-Path $repoRoot 'eshop'
          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Path $target -Force | Out-Null }
          if (-not (Test-Path (Join-Path $target '.git'))) {
            git clone --quiet https://github.com/contoso-co/eshop.git $target
          }
        GetScript: |
          if (Test-Path "Z:\workspaces\eshop\.git" -or Test-Path "C:\workspaces\eshop\.git") {
            return @{ Cloned = $true }
          }

          return @{ Cloned = $false }

    # --- Tools & Apps über WinGet ---
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: docker
      directives:
        description: Install Docker Desktop
        allowPrerelease: true
      settings:
        id: Docker.DockerDesktop
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: chrome
      directives:
        description: Install Google Chrome
      settings:
        id: Google.Chrome
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: adobereader
      directives:
        description: Install Adobe Acrobat Reader
      settings:
        id: Adobe.Acrobat.Reader.64-bit
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: notepadpp
      directives:
        description: Install Notepad++
      settings:
        id: Notepad++.Notepad++
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
      settings:
        id: Microsoft.AzureCLI
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: terraform
      directives:
        description: Install Terraform
      settings:
        id: Hashicorp.Terraform
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: datagrip
      directives:
        description: Install JetBrains DataGrip
      settings:
        id: JetBrains.DataGrip
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: dbeaver
      directives:
        description: Install DBeaver
      settings:
        id: DBeaver.DBeaver.Community
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: storageexplorer
      directives:
        description: Install Azure Storage Explorer
      settings:
        id: Microsoft.Azure.StorageExplorer
        source: winget

    # --- Python 3.12 über Offline-Installer ---
    - resource: PSDscResources/Script
      id: installPython312
      directives:
        description: Installiert Python 3.12 (x64) offline und fügt es zum PATH hinzu
      settings:
        TestScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null
            $isDesired = $version -match '^Python 3\.12'
            $isMachine = $pythonExe -like 'C:\\Program Files*'
            return ($isDesired -and $isMachine)
          }
          catch {
            return $false
          }
        SetScript: |
          $version   = '3.12.6'
          $fileName  = "python-$version-amd64.exe"
          $download  = "https://www.python.org/ftp/python/$version/$fileName"
          $installer = Join-Path $env:TEMP $fileName

          if (-not (Test-Path $installer)) {
            Invoke-WebRequest -Uri $download -OutFile $installer -UseBasicParsing
          }

          if (-not (Test-Path $installer)) {
            throw "Python-Installer wurde nicht erfolgreich heruntergeladen."
          }

          $arguments = '/quiet InstallAllUsers=1 PrependPath=1 Include_launcher=1 Include_test=0'
          $process   = Start-Process -FilePath $installer -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "Python-Installation schlug fehl (ExitCode: $($process.ExitCode))."
          }
        GetScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null
            return @{ Installed = $true; Path = $pythonExe; Version = $version }
          }
          catch {
            return @{ Installed = $false }
          }

    # --- WSL-Features aktivieren ---
    - resource: PSDesiredStateConfiguration/WindowsOptionalFeature
      id: enableWslFeature
      directives:
        description: Aktiviert das Windows-Subsystem für Linux
      settings:
        Name: Microsoft-Windows-Subsystem-Linux
        Ensure: Present
        NoRestart: true

    - resource: PSDesiredStateConfiguration/WindowsOptionalFeature
      id: enableVmPlatformFeature
      directives:
        description: Aktiviert die Virtual Machine Platform (für WSL 2)
      settings:
        Name: VirtualMachinePlatform
        Ensure: Present
        NoRestart: true

    # --- WSL-Kernel aktualisieren ---
    - resource: PSDscResources/Script
      id: installWslKernelUpdate
      dependsOn:
        - enableWslFeature
        - enableVmPlatformFeature
      directives:
        description: Installiert das aktuelle WSL-Kernel-Update (x64)
      settings:
        TestScript: |
          try {
            $status = (& wsl --status) 2>$null
            return ($status -match 'Kernel version')
          }
          catch {
            return $false
          }
        SetScript: |
          $kernelUrl = 'https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi'
          $installer = Join-Path $env:TEMP 'wsl_update_x64.msi'

          if (-not (Test-Path $installer)) {
            Invoke-WebRequest -Uri $kernelUrl -OutFile $installer -UseBasicParsing
          }

          if (-not (Test-Path $installer)) {
            throw "WSL-Kernel-Update konnte nicht heruntergeladen werden."
          }

          $arguments = '/i "{0}" /qn /norestart' -f $installer
          $process   = Start-Process -FilePath 'msiexec.exe' -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "WSL-Kernel-Update schlug fehl (ExitCode: $($process.ExitCode))."
          }
        GetScript: |
          try {
            $status = (& wsl --status) 2>$null
            return @{ KernelStatus = $status }
          }
          catch {
            return @{ KernelStatus = 'WSL nicht verfügbar' }
          }
