# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:
    # --- Repo klonen (robust, fällt auf C:\ zurück, wenn Z:\ noch nicht da ist; läuft nur, wenn Git vorhanden ist) ---
    - resource: PSDscResources/Script
      id: cloneRepo
      settings:
        TestScript: |
          # Bereits geklont?
          if (Test-Path "Z:\workspaces\eshop\.git") { return $true }
          if (Test-Path "C:\workspaces\eshop\.git") { return $true }
          return $false
        SetScript: |
          if (Test-Path 'Z:') {
            $repoRoot = 'Z:\workspaces'
          }
          else {
            $repoRoot = 'C:\workspaces'
          }
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            Write-Host "Git nicht gefunden; überspringe Clone in diesem Lauf."
            return
          }
          if (-not (Test-Path $repoRoot)) { New-Item -ItemType Directory -Path $repoRoot -Force | Out-Null }
          $target = Join-Path $repoRoot 'eshop'
          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Path $target -Force | Out-Null }
          if (-not (Test-Path (Join-Path $target '.git'))) {
            git clone --quiet https://github.com/contoso-co/eshop.git $target
          }
        GetScript: |
          if (Test-Path "Z:\workspaces\eshop\.git" -or Test-Path "C:\workspaces\eshop\.git") {
            return @{ Cloned = $true }
          }

          return @{ Cloned = $false }

    # --- Tools & Apps über WinGet ---
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: docker
      directives:
        description: Install Docker Desktop
        allowPrerelease: true
      settings:
        id: Docker.DockerDesktop

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: chrome
      directives:
        description: Install Google Chrome
      settings:
        id: Google.Chrome

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: adobereader
      directives:
        description: Install Adobe Acrobat Reader
      settings:
        id: Adobe.Acrobat.Reader.64-bit

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: notepadpp
      directives:
        description: Install Notepad++
      settings:
        id: Notepad++.Notepad++

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
      settings:
        id: Microsoft.AzureCLI

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: terraform
      directives:
        description: Install Terraform
      settings:
        id: Hashicorp.Terraform

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: datagrip
      directives:
        description: Install JetBrains DataGrip
      settings:
        id: JetBrains.DataGrip

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: dbeaver
      directives:
        description: Install DBeaver
      settings:
        id: DBeaver.DBeaver.Community

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: storageexplorer
      directives:
        description: Install Azure Storage Explorer
      settings:
        id: Microsoft.Azure.StorageExplorer

    # --- Python 3.12: maschinenweit + PATH (fix für InstallerError 3) ---
    - resource: PSDscResources/Script
      id: installPython312
      dependsOn:
        - installWingetCli
      directives:
        description: Installiert Python 3.12 maschinenweit
      settings:
        TestScript: |
          $python = Get-Command python.exe -ErrorAction SilentlyContinue
          if ($null -eq $python) { return $false }

          try {
            $version = (& python --version) 2>$null
            return $version -match '^Python 3\.12'
          }
          catch {
            return $false
          }

        SetScript: |
          $arguments = @(
            '--id', 'Python.Python.3.12',
            '--silent',
            '--accept-package-agreements',
            '--accept-source-agreements',
            '--override', 'InstallAllUsers=1 PrependPath=1 Include_test=0 Include_launcher=1'
          )

          winget install @arguments
        GetScript: |
          $python = Get-Command python.exe -ErrorAction SilentlyContinue
          if ($null -eq $python) {
            return @{ Installed = $false }
          }

          return @{
            Installed = $true
            Path       = $python.Source
            Version    = (& python --version) 2>$null
          }

    # --- WSL aktivieren (keine Distro) ---
    - resource: PSDscResources/Script
      id: enableWsl
      directives:
        description: Aktiviert WSL, falls noch nicht vorhanden
      settings:
        TestScript: |
          $wslState = (Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux).State
          $vmState  = (Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform).State
          return ($wslState -eq 'Enabled' -and $vmState -eq 'Enabled')
        SetScript: |
          Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart -All | Out-Null
          Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart -All | Out-Null
        GetScript: |
          return @{
            WslFeatureState = (Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux).State
            VmPlatformState = (Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform).State
          }
