# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:
  
#    # --- Repo klonen (robust, fällt auf C:\ zurück, wenn Z:\ noch nicht da ist; läuft nur, wenn Git vorhanden ist) ---
#    - resource: PSDscResources/Script
#      id: cloneRepo
#      settings:
#        TestScript: |
#          # Bereits geklont?
#          if (Test-Path "Z:\workspaces\eshop\.git") { return $true }
#          if (Test-Path "C:\workspaces\eshop\.git") { return $true }
#          return $false
#        SetScript: |
#          if (Test-Path 'Z:') {
#            $repoRoot = 'Z:\workspaces'
#          }
#          else {
#            $repoRoot = 'C:\workspaces'
#          }
#          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
#            Write-Host "Git nicht gefunden; überspringe Clone in diesem Lauf."
#            return
#          }
#          if (-not (Test-Path $repoRoot)) { New-Item -ItemType Directory -Path $repoRoot -Force | Out-Null }
#          $target = Join-Path $repoRoot 'eshop'
#          if (-not (Test-Path $target)) { New-Item -ItemType Directory -Path $target -Force | Out-Null }
#          if (-not (Test-Path (Join-Path $target '.git'))) {
#            git clone --quiet https://github.com/contoso-co/eshop.git $target
#          }
#        GetScript: |
#          if (Test-Path "Z:\workspaces\eshop\.git" -or Test-Path "C:\workspaces\eshop\.git") {
#            return @{ Cloned = $true }
#          }
#
#          return @{ Cloned = $false }
#
    # --- WSL installieren ---
    - resource: PSDscResources/Script
      id: installWsl
      directives:
        description: Installiert WSL (Subsystem + Kernel) über wsl --install
      settings:
        TestScript: |
          try {
            $wslFeature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
            $vmFeature  = Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform
            if ($wslFeature.State -ne 'Enabled' -or $vmFeature.State -ne 'Enabled') {
              return $false
            }

            $process = Start-Process -FilePath 'wsl.exe' -ArgumentList '--status' -Wait -PassThru -WindowStyle Hidden
            if ($process.ExitCode -eq 0) {
              $output = (& wsl --status) 2>$null
              return ($output -match 'Kernel version')
            }

            return $true
          }
          catch {
            return $false
          }
        SetScript: |
          $isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
          if (-not $isAdmin) {
            Write-Warning "WSL-Installation benötigt Administratorrechte. Schritt wird übersprungen."
            return
          }

          $arguments = @('--install','--no-distribution')
          $process   = Start-Process -FilePath 'wsl.exe' -ArgumentList $arguments -Wait -PassThru -WindowStyle Hidden

          if ($process.ExitCode -ne 0) {
            throw "WSL-Installation schlug fehl (ExitCode: $($process.ExitCode))."
          }
        GetScript: |
          try {
            $status = (& wsl --status) 2>$null
            return @{ KernelStatus = $status }
          }
          catch {
            return @{ KernelStatus = 'WSL nicht verfügbar' }
          }

    # --- Tools & Apps über WinGet ---
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: docker
      dependsOn:
        - installWsl
      directives:
        description: Install Docker Desktop
      settings:
        id: Docker.DockerDesktop
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: chrome
      directives:
        description: Install Google Chrome
      settings:
        id: Google.Chrome
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: adobereader
      directives:
        description: Install Adobe Acrobat Reader
      settings:
        id: Adobe.Acrobat.Reader.64-bit
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: vscode
      directives:
        description: Install Visual Studio Code
      settings:
        id: Microsoft.VisualStudioCode
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: notepadpp
      directives:
        description: Install Notepad++
      settings:
        id: Notepad++.Notepad++
        source: winget

    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: azurecli
      directives:
        description: Install Azure CLI
      settings:
        id: Microsoft.AzureCLI
        source: winget

    # --- Chocolatey installieren ---
    - resource: PSDscResources/Script
      id: installChocolatey
      directives:
        description: Installiert Chocolatey, falls noch nicht vorhanden
      settings:
        TestScript: |
          return (Get-Command choco.exe -ErrorAction SilentlyContinue) -ne $null
        SetScript: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        GetScript: |
          $choco = Get-Command choco.exe -ErrorAction SilentlyContinue
          return @{ ChocolateyPath = $choco?.Source }

    # - resource: Microsoft.WinGet.DSC/WinGetPackage
    #   id: terraform
    #   directives:
    #     description: Install Terraform (Winget)
    #   settings:
    #     id: HashiCorp.Terraform
    #     source: winget

    # - resource: Microsoft.WinGet.DSC/WinGetPackage
    #   id: datagrip
    #   directives:
    #     description: Install JetBrains DataGrip
    #   settings:
    #     id: JetBrains.DataGrip
    #     source: winget

    # --- Terraform über Chocolatey ---
    - resource: PSDscResources/Script
      id: installTerraformChoco
      dependsOn:
        - installChocolatey
      directives:
        description: Installiert Terraform über Chocolatey (systemweit)
      settings:
        TestScript: |
          $terraformCmd = Get-Command terraform.exe -ErrorAction SilentlyContinue
          return [bool]$terraformCmd
        SetScript: |
          choco upgrade terraform --yes --no-progress --acceptlicense
        GetScript: |
          try {
            $terraformCmd = Get-Command terraform.exe -ErrorAction Stop
            $version = (& $terraformCmd.Source --version) 2>$null | Select-Object -First 1
            return @{ Installed = $true; Path = $terraformCmd.Source; Version = $version }
          }
          catch {
            return @{ Installed = $false }
          }

    # --- DataGrip über Chocolatey ---
    - resource: PSDscResources/Script
      id: installDataGripChoco
      dependsOn:
        - installChocolatey
      directives:
        description: Installiert JetBrains DataGrip über Chocolatey (systemweit)
      settings:
        TestScript: |
          $dgPath = Get-ChildItem 'C:\Program Files\JetBrains\DataGrip*\bin\datagrip64.exe' -ErrorAction SilentlyContinue | Select-Object -First 1
          return [bool]$dgPath
        SetScript: |
          choco upgrade datagrip --yes --no-progress --acceptlicense
        GetScript: |
          $dgPath = Get-ChildItem 'C:\Program Files\JetBrains\DataGrip*\bin\datagrip64.exe' -ErrorAction SilentlyContinue | Select-Object -First 1
          return @{ Installed = [bool]$dgPath; Path = if ($dgPath) { $dgPath.FullName } else { $null } }

    # --- Python 3.12 über Chocolatey ---
    - resource: PSDscResources/Script
      id: installPython312Choco
      dependsOn:
        - installChocolatey
      directives:
        description: Installiert Python 3.12 (x64) über Chocolatey (systemweit)
      settings:
        TestScript: |
          $pythonCmd = Get-Command python.exe -ErrorAction SilentlyContinue
          if (-not $pythonCmd) { return $false }

          $version = (& $pythonCmd.Source --version) 2>$null
          return ($version -match '^Python 3\.12')
        SetScript: |
          choco upgrade python --version 3.12.6 --yes --no-progress --acceptlicense
        GetScript: |
          try {
            $pythonCmd = Get-Command python.exe -ErrorAction Stop
            $pythonExe = $pythonCmd.Source
            $version   = (& $pythonExe --version) 2>$null
            return @{ Installed = $true; Path = $pythonExe; Version = $version }
          }
          catch {
            return @{ Installed = $false }
          }

    # --- DBeaver über Chocolatey ---
    - resource: PSDscResources/Script
      id: installDBeaverChoco
      dependsOn:
        - installChocolatey
      directives:
        description: Installiert DBeaver Community Edition über Chocolatey (systemweit)
      settings:
        TestScript: |
          $exe = Get-Command 'C:\Program Files\DBeaver\dbeaver.exe' -ErrorAction SilentlyContinue
          return [bool]$exe
        SetScript: |
          choco upgrade dbeaver --yes --no-progress --acceptlicense
        GetScript: |
          $exe = Get-Command 'C:\Program Files\DBeaver\dbeaver.exe' -ErrorAction SilentlyContinue
          return @{ Installed = [bool]$exe; Path = if ($exe) { $exe.Source } else { $null } }

