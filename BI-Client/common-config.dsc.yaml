# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0

  resources:

    # Git for Windows installieren
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: git
      directives:
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget

    # GCM: Default WAM Account aktivieren (systemweit)
    - resource: PSDscResources/Script
      id: gitUseDefaultWam
      dependsOn:
        - git
      directives:
        description: Configure Git Credential Manager to use Default WAM account (system-wide)
      settings:
        SetScript: |
          # PATH aus Registry neu setzen, damit Git in dieser Session verfügbar ist
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" +
                      [System.Environment]::GetEnvironmentVariable("Path","User")

          # GCM Default Account systemweit aktivieren
          [Environment]::SetEnvironmentVariable('GCM_MSAUTH_USEDEFAULTACCOUNT','true','Machine')
          git config --system credential.msauthUseDefaultAccount true
        TestScript: |
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            return $false
          }

          $envValue  = [Environment]::GetEnvironmentVariable('GCM_MSAUTH_USEDEFAULTACCOUNT','Machine')
          $gitConfig = git config --system --get credential.msauthUseDefaultAccount 2>$null
          return ($envValue -eq 'true' -and $gitConfig -eq 'true')
        GetScript: |
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            return @{ Installed = $false }
          }

          return @{
            Installed = $true
            MachineVariable = [Environment]::GetEnvironmentVariable('GCM_MSAUTH_USEDEFAULTACCOUNT','Machine')
            GitConfigValue  = git config --system --get credential.msauthUseDefaultAccount 2>$null
          }

    # GCM: OAuth für selbstgehostetes GitLab konfigurieren (systemweit)
    - resource: PSDscResources/Script
      id: gitlabOauthConfig
      dependsOn:
        - git
      directives:
        description: Konfiguriert GCM für selbst-gehostetes GitLab (OAuth) – systemweite Einstellungen
      settings:
        SetScript: |
          # PATH aktualisieren, damit git sicher gefunden wird
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" +
                      [System.Environment]::GetEnvironmentVariable("Path","User")

          $domain   = "gitlab.bankfrick.li"
          $clientId = "e60e535167320bdced2f21e75f9330bf30de8a7c8b10b1c9be0f49ca23902b7f"

          # ggf. alte (falsche) Keys entfernen – systemweit
          git config --system --unset credential.https://$domain.oauthauthurl   2>$null
          git config --system --unset credential.https://$domain.oauthtokenurl  2>$null
          git config --system --unset credential.https://$domain.oauthClientId  2>$null
          git config --system --unset credential.https://$domain.oauthScopes    2>$null
          git config --system --unset credential.https://$domain.oauthAuthUrl   2>$null
          git config --system --unset credential.https://$domain.oauthTokenUrl  2>$null
          git config --system --unset credential.https://$domain.oauthRedirectUrl 2>$null

          # korrekte Keys setzen – systemweit
          git config --system credential.https://$domain.oauthClientId   "$clientId"
          git config --system credential.https://$domain.oauthScopes     "read_repository write_repository"
          git config --system credential.https://$domain.oauthAuthUrl    "https://$domain/oauth/authorize"
          git config --system credential.https://$domain.oauthTokenUrl   "https://$domain/oauth/token"
          git config --system credential.https://$domain.oauthRedirectUrl "urn:ietf:wg:oauth:2.0:oob"
        TestScript: |
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            return $false
          }

          $domain   = "gitlab.bankfrick.li"
          $clientId = "e60e535167320bdced2f21e75f9330bf30de8a7c8b10b1c9be0f49ca23902b7f"
          $scopes   = "read_repository write_repository"
          $authUrl  = "https://$domain/oauth/authorize"
          $tokenUrl = "https://$domain/oauth/token"
          $redirect = "urn:ietf:wg:oauth:2.0:oob"

          $clientConfigured = (git config --system --get credential.https://$domain.oauthClientId 2>$null) -eq $clientId
          $scopesConfigured = (git config --system --get credential.https://$domain.oauthScopes 2>$null) -eq $scopes
          $authConfigured   = (git config --system --get credential.https://$domain.oauthAuthUrl 2>$null) -eq $authUrl
          $tokenConfigured  = (git config --system --get credential.https://$domain.oauthTokenUrl 2>$null) -eq $tokenUrl
          $redirectConfig   = (git config --system --get credential.https://$domain.oauthRedirectUrl 2>$null) -eq $redirect

          return ($clientConfigured -and $scopesConfigured -and $authConfigured -and $tokenConfigured -and $redirectConfig)
        GetScript: |
          if (-not (Get-Command git.exe -ErrorAction SilentlyContinue)) {
            return @{ GitAvailable = $false }
          }

          $domain = "gitlab.bankfrick.li"

          return @{
            GitAvailable = $true
            ClientId     = git config --system --get credential.https://$domain.oauthClientId 2>$null
            Scopes       = git config --system --get credential.https://$domain.oauthScopes 2>$null
            AuthUrl      = git config --system --get credential.https://$domain.oauthAuthUrl 2>$null
            TokenUrl     = git config --system --get credential.https://$domain.oauthTokenUrl 2>$null
            RedirectUrl  = git config --system --get credential.https://$domain.oauthRedirectUrl 2>$null
          }

    # Schweizerdeutsche Locale/Keyboard setzen
    - resource: PSDscResources/Script
      id: setLocaleCH
      directives:
        description: Stellt de-CH als Standard-Sprache, -Tastatur und -Region ein
      settings:
        TestScript: |
          return ((Get-Culture).Name -eq "de-CH")
        SetScript: |
          $lang = "de-CH"
          Set-WinSystemLocale -SystemLocale $lang
          Set-Culture $lang
          Set-WinHomeLocation -GeoId 223   # Schweiz
          $list = New-WinUserLanguageList $lang
          # explizit Swiss-German Keyboard 0807
          $list[0].InputMethodTips.Clear()
          $list[0].InputMethodTips.Add("0807:00000807")
          Set-WinUserLanguageList $list -Force
        GetScript: |
          return @{
            Culture          = (Get-Culture).Name
            SystemLocale     = (Get-WinSystemLocale).Name
            HomeLocationGeo  = (Get-WinHomeLocation).GeoId
            KeyboardLayouts  = (Get-WinUserLanguageList).InputMethodTips
          }
